name: Deploy to VPS (self-hosted)

on:
  push:
    branches: ['master']
  workflow_dispatch: {}

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: self-hosted

    env:
      DEPLOY_PATH: ${{ vars.DEPLOY_PATH || '/srv/docker/viral_cast_ai/app' }}
      HEALTHCHECK_URL: http://127.0.0.1:5544/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Show runner context
        shell: bash
        run: |
          set -euo pipefail
          echo "User: $(id -un)"
          echo "Groups: $(id -nG)"
          echo "PWD: $PWD"
          docker --version || true
          docker compose version || true
          echo "DEPLOY_PATH=${DEPLOY_PATH}"

      - name: Ensure DEPLOY_PATH exists & writable
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$DEPLOY_PATH" 2>/dev/null || { command -v sudo >/dev/null && sudo mkdir -p "$DEPLOY_PATH"; }
          ME_USER="$(id -un)"; ME_GROUP="$(id -gn)"
          if command -v sudo >/dev/null; then
            sudo chown -R "$ME_USER:$ME_GROUP" "$DEPLOY_PATH" || true
          fi
          find "$DEPLOY_PATH" -type d -exec chmod 755 {} \; || true
          find "$DEPLOY_PATH" -type f -exec chmod 644 {} \; || true
          touch "$DEPLOY_PATH/.perm_check" || { echo "Cannot write to ${DEPLOY_PATH}"; exit 1; }
          rm -f "$DEPLOY_PATH/.perm_check"

      - name: Sync source to DEPLOY_PATH (rsync safe perms)
        shell: bash
        run: |
          set -euo pipefail
          rsync -az --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            --exclude ".svelte-kit" \
            --exclude "coverage" \
            --no-owner --no-group --omit-dir-times \
            --chmod=Du=rwx,Dg=rx,Do=rx,Fu=rw,Fg=r,Fo=r \
            ./ "$DEPLOY_PATH/"

      - name: Build & start with Docker Compose
        shell: bash
        run: |
          set -euo pipefail
          cd "$DEPLOY_PATH"
          # Ensure environment variables are set for production
          export NODE_ENV=production
          export PORT=5544
          export HOST=0.0.0.0
          docker compose up -d --build
          docker image prune -f || true

      - name: Wait for container to be ready
        shell: bash
        run: |
          set -euo pipefail
          cd "$DEPLOY_PATH"
          echo "Waiting for container to start..."
          sleep 10
          docker compose ps
          docker compose logs --tail=50 viral-cast-ai-frontend

      - name: Smoke check
        shell: bash
        run: |
          set -euo pipefail
          echo "Starting health check for $HEALTHCHECK_URL"
          for i in {1..30}; do
            if curl -fsS "$HEALTHCHECK_URL" >/dev/null 2>&1; then
              echo "✅ Health check passed! Application is responding at $HEALTHCHECK_URL"
              curl -s "$HEALTHCHECK_URL" | head -c 200 || true
              exit 0
            fi
            echo "⏳ Waiting for app to respond... ($i/30)"
            sleep 3
          done
          echo "❌ Smoke check failed for $HEALTHCHECK_URL" >&2
          echo "Attempting to get more information..."
          curl -v "$HEALTHCHECK_URL" || true
          exit 1

      - name: Dump docker status on failure
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          cd "$DEPLOY_PATH" || true
          docker compose ps || true
          docker compose logs --no-color --tail=300 || true
          ss -tulpn | grep ':5544' || true
